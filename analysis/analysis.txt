YOUR NAME and YOUR NETID
Brian Du	bd121

Run WordGramDiver for wordgrams of size 2-10 and record
the number of WordGram values/objects that occur more than
once as reported by the runs. For example, with WSIZE = 2,
which generates 2-grams, the output of benchmark and benchmarkShift
each indicates that the total # wordgrams generated is 177,634
and that the # unique wordgrams is 117,181

This means there are 177,634 - 117,181 = 60,453 WordGram values that
occur more than once. Find these same values for other orders
of k and complete the table below for different k-grams/different 
values of WSIZE

WSIZE    # duplicates
2        60,453
3        10,756
4		 1,987
5		 667
7        226
8		 151
9		 105
10		 73

=====
Explain in your own words the conceptual differences between 
the benchmark and benchmarkShift methods. 
Answer these questions: 

(1) Why the results of these methods should be the same in 
terms of changes made to the HashSet parameter.
they both end up creating the same WordGram objects (content-wise) that they then add to a set.

(2) What are the conceptual differences between the two
benchmarking methods

Benchmark scans 'words' from file into and saves them into an ArrayList initially.
It then changes it into an array, which it uses to create all WordGram objects that it
saves into a set.
In comparison, BemchmarkShift scans 'words' from file into arrays of the size denoted by wSize, the size intended for each WordGram
and then calls shiftAdd while there are more words in file and saves each new WordGram into the set.

(3) Is the total amount of memory allocated for arrays
the same or different in the two methods? Account for
arrays created in the methods and arrays created by
WordGram objects. Try to be quantitative in answering.

arrays created by methods should disappear after the method is called, along with all the space it took up. However, the ones
created by WordGram objects do not disappear. Since benchmarkShift calls shiftAdd method while benchmark creates all the 
WordGram objects itself, benchmark should take up roughly n times as much space (theoretically), where n is the count returned
 by the code. 

